Nonterminals useless in grammar

    primary_expression
    generic_selection
    generic_assoc_list
    generic_association
    postfix_expression
    argument_expression_list
    unary_expression
    unary_operator
    cast_expression
    multiplicative_expression
    additive_expression
    shift_expression
    relational_expression
    equality_expression
    and_expression
    exclusive_or_expression
    inclusive_or_expression
    logical_and_expression
    logical_or_expression
    conditional_expression
    assignment_expression
    assignment_operator
    expression
    constant_expression
    declaration
    declaration_specifiers
    init_declarator_list
    init_declarator
    storage_class_specifier
    type_specifier
    struct_or_union_specifier
    struct_or_union
    struct_declaration_list
    struct_declaration
    specifier_qualifer_list
    struct_declarator_list
    struct_declarator
    enum_specifier
    enumerator_list
    enumerator
    atomic_type_specifier
    type_qualifier
    function_specifier
    alignment_specifier
    declarator
    direct_declarator
    pointer
    type_qualifier_list
    parameter_type_list
    parameter_list
    parameter_declaration
    identifier_list
    type_name
    abstract_declarator
    direct_abstract_declarator
    typedef_name
    initalizer
    initalizer_list
    designation
    designator_list
    designator
    static_assert_decleration
    statment
    labeled_statment
    compound_statment
    block_item_list
    block_item
    expression_statment
    selection_statment
    iteration_statment
    jump_statment
    translation_unit
    external_declaration
    function_definition
    declaration_list


Terminals unused in grammar

    STRING
    INDSEL
    PLUSPLUS
    MINUSMINUS
    SHL
    SHR
    LTEQ
    GTEQ
    EQEQ
    NOTEQ
    LOGAND
    LOGOR
    ELLIPSIS
    TIMESEQ
    DIVEQ
    MODEQ
    PLUSEQ
    MINUSEQ
    SHLEQ
    SHREQ
    ANDEQ
    OREQ
    XOREQ
    AUTO
    BREAK
    CASE
    CHAR
    CONST
    CONTINUE
    DEFAULT
    DO
    DOUBLE
    ELSE
    ENUM
    EXTERN
    FLOAT
    FOR
    GOTO
    IF
    INLINE
    INT
    LONG
    REGISTER
    RESTRICT
    RETURN
    SHORT
    SIGNED
    SIZEOF
    STATIC
    STRUCT
    SWITCH
    TYPEDEF
    UNION
    UNSIGNED
    VOID
    VOLATILE
    WHILE
    _ALIGNAS
    _ALIGNOF
    _ATOMIC
    _BOOL
    _COMPLEX
    _GENERIC
    _IMAGINARY
    _NORETURN
    _STATIC_ASSERT
    _THREAD_LOCAL
    LN
    '('
    ')'
    ','
    ':'
    '['
    ']'
    '.'
    '{'
    '}'
    '&'
    '*'
    '+'
    '-'
    '~'
    '!'
    '/'
    '%'
    '<'
    '>'
    '^'
    '|'
    '?'
    '='
    ';'


Rules useless in grammar

    6 primary_expression: IDENT
    7                   | constant
    8                   | STRING
    9                   | '(' expression ')'
   10                   | generic_selection
   11                   | ε

   12 generic_selection: _GENERIC '(' assignment_expression ',' generic_assoc_list ')'

   13 generic_assoc_list: generic_association
   14                   | generic_assoc_list ',' generic_association
   15                   | ε

   16 generic_association: type_name ':' assignment_expression
   17                    | DEFAULT ':' assignment_expression
   18                    | ε

   19 postfix_expression: primary_expression
   20                   | postfix_expression '[' expression ']'
   21                   | postfix_expression '(' argument_expression_list ')'
   22                   | postfix_expression '(' ')'
   23                   | postfix_expression '.' IDENT
   24                   | postfix_expression INDSEL IDENT
   25                   | postfix_expression PLUSPLUS IDENT
   26                   | postfix_expression MINUSMINUS IDENT
   27                   | '(' type_name ')' '{' initalizer_list '}'
   28                   | '(' type_name ')' '{' initalizer_list ',' '}'
   29                   | ε

   30 argument_expression_list: assignment_expression
   31                         | argument_expression_list ',' assignment_expression
   32                         | ε

   33 unary_expression: postfix_expression
   34                 | PLUSPLUS unary_expression
   35                 | MINUSMINUS unary_expression
   36                 | unary_operator cast_expression
   37                 | SIZEOF unary_expression
   38                 | SIZEOF '(' type_name ')'
   39                 | _ALIGNOF '(' type_name ')'
   40                 | ε

   41 unary_operator: '&'
   42               | '*'
   43               | '+'
   44               | '-'
   45               | '~'
   46               | '!'
   47               | ε

   48 cast_expression: unary_expression
   49                | '(' type_name ')' cast_expression
   50                | ε

   51 multiplicative_expression: cast_expression
   52                          | multiplicative_expression '*' cast_expression
   53                          | multiplicative_expression '/' cast_expression
   54                          | multiplicative_expression '%' cast_expression
   55                          | ε

   56 additive_expression: multiplicative_expression
   57                    | additive_expression '+' multiplicative_expression
   58                    | additive_expression '-' multiplicative_expression
   59                    | ε

   60 shift_expression: additive_expression
   61                 | shift_expression SHL additive_expression
   62                 | shift_expression SHR additive_expression
   63                 | ε

   64 relational_expression: shift_expression
   65                      | relational_expression '<' shift_expression
   66                      | relational_expression '>' shift_expression
   67                      | relational_expression LTEQ shift_expression
   68                      | relational_expression GTEQ shift_expression
   69                      | ε

   70 equality_expression: relational_expression
   71                    | equality_expression EQEQ relational_expression
   72                    | equality_expression NOTEQ relational_expression
   73                    | ε

   74 and_expression: equality_expression
   75               | and_expression '&' equality_expression
   76               | ε

   77 exclusive_or_expression: and_expression
   78                        | exclusive_or_expression '^' and_expression
   79                        | ε

   80 inclusive_or_expression: exclusive_or_expression
   81                        | inclusive_or_expression '|' exclusive_or_expression
   82                        | ε

   83 logical_and_expression: inclusive_or_expression
   84                       | logical_and_expression LOGAND inclusive_or_expression
   85                       | ε

   86 logical_or_expression: logical_and_expression
   87                      | logical_or_expression LOGOR logical_and_expression
   88                      | ε

   89 conditional_expression: logical_or_expression
   90                       | logical_or_expression '?' expression ':' conditional_expression
   91                       | ε

   92 assignment_expression: conditional_expression
   93                      | unary_expression assignment_operator assignment_expression
   94                      | ε

   95 assignment_operator: '='
   96                    | TIMESEQ
   97                    | DIVEQ
   98                    | MODEQ
   99                    | PLUSEQ
  100                    | MINUSEQ
  101                    | SHLEQ
  102                    | SHREQ
  103                    | ANDEQ
  104                    | XOREQ
  105                    | OREQ
  106                    | ε

  107 expression: assignment_expression
  108           | expression ',' assignment_expression
  109           | ε

  110 constant_expression: conditional_expression

  111 declaration: declaration_specifiers init_declarator_list ';'
  112            | declaration_specifiers ';'
  113            | static_assert_decleration
  114            | ε

  115 declaration_specifiers: storage_class_specifier declaration_specifiers
  116                       | storage_class_specifier
  117                       | type_specifier declaration_specifiers
  118                       | type_specifier
  119                       | type_qualifier declaration_specifiers
  120                       | type_qualifier
  121                       | function_specifier declaration_specifiers
  122                       | function_specifier
  123                       | alignment_specifier declaration_specifiers
  124                       | alignment_specifier
  125                       | ε

  126 init_declarator_list: init_declarator
  127                     | init_declarator_list ',' init_declarator
  128                     | ε

  129 init_declarator: declarator
  130                | declarator '=' initalizer
  131                | ε

  132 storage_class_specifier: TYPEDEF
  133                        | EXTERN
  134                        | STATIC
  135                        | _THREAD_LOCAL
  136                        | AUTO
  137                        | REGISTER
  138                        | ε

  139 type_specifier: VOID
  140               | CHAR
  141               | SHORT
  142               | INT
  143               | LONG
  144               | FLOAT
  145               | DOUBLE
  146               | SIGNED
  147               | UNSIGNED
  148               | _BOOL
  149               | _COMPLEX
  150               | atomic_type_specifier
  151               | struct_or_union_specifier
  152               | enum_specifier
  153               | typedef_name
  154               | ε

  155 struct_or_union_specifier: struct_or_union IDENT '{' struct_declaration_list '}'
  156                          | struct_or_union '{' struct_declaration_list '}'
  157                          | struct_or_union IDENT
  158                          | ε

  159 struct_or_union: STRUCT
  160                | UNION
  161                | ε

  162 struct_declaration_list: struct_declaration
  163                        | struct_declaration_list struct_declaration
  164                        | ε

  165 struct_declaration: specifier_qualifer_list struct_declarator_list ';'
  166                   | specifier_qualifer_list ';'
  167                   | static_assert_decleration
  168                   | ε

  169 specifier_qualifer_list: type_specifier specifier_qualifer_list
  170                        | type_specifier
  171                        | type_qualifier specifier_qualifer_list
  172                        | type_qualifier
  173                        | ε

  174 struct_declarator_list: struct_declarator_list
  175                       | struct_declarator_list ',' struct_declarator
  176                       | ε

  177 struct_declarator: declarator
  178                  | declarator ':' constant_expression
  179                  | ':' constant_expression
  180                  | ε

  181 enum_specifier: ENUM IDENT '{' enumerator_list '}'
  182               | ENUM '{' enumerator_list '}'
  183               | ENUM IDENT '{' enumerator_list ',' '}'
  184               | ENUM '{' enumerator_list ',' '}'
  185               | ENUM IDENT
  186               | ε

  187 enumerator_list: enumerator
  188                | enumerator_list ',' enumerator
  189                | ε

  190 enumerator: enumeration_constant
  191           | enumeration_constant '=' constant_expression
  192           | ε

  193 atomic_type_specifier: _ATOMIC '(' type_name ')'

  194 type_qualifier: CONST
  195               | RESTRICT
  196               | VOLATILE
  197               | _ATOMIC
  198               | ε

  199 function_specifier: INLINE
  200                   | _NORETURN
  201                   | ε

  202 alignment_specifier: _ALIGNAS '(' type_name ')'
  203                    | _ALIGNAS '(' constant_expression ')'
  204                    | ε

  205 declarator: pointer direct_declarator
  206           | direct_declarator
  207           | ε

  208 direct_declarator: IDENT
  209                  | '(' declarator ')'
  210                  | direct_declarator '[' type_qualifier_list assignment_expression ']'
  211                  | direct_declarator '[' type_qualifier_list ']'
  212                  | direct_declarator '[' assignment_expression ']'
  213                  | direct_declarator '[' ']'
  214                  | direct_declarator '[' STATIC type_qualifier_list assignment_expression ']'
  215                  | direct_declarator '[' STATIC assignment_expression ']'
  216                  | direct_declarator '[' type_qualifier_list STATIC assignment_expression ']'
  217                  | direct_declarator '[' type_qualifier_list '*' ']'
  218                  | direct_declarator '[' '*' ']'
  219                  | direct_declarator '(' parameter_type_list ')'
  220                  | direct_declarator '(' identifier_list ')'
  221                  | direct_declarator '(' ')'
  222                  | ε

  223 pointer: '*' type_qualifier_list
  224        | '*'
  225        | '*' type_qualifier_list pointer
  226        | '*' pointer
  227        | ε

  228 type_qualifier_list: type_qualifier
  229                    | type_qualifier_list type_qualifier
  230                    | ε

  231 parameter_type_list: parameter_list
  232                    | parameter_list ',' ELLIPSIS
  233                    | ε

  234 parameter_list: parameter_declaration
  235               | parameter_list ',' parameter_declaration
  236               | ε

  237 parameter_declaration: declaration_specifiers declarator
  238                      | declaration_specifiers abstract_declarator
  239                      | declaration_specifiers
  240                      | ε

  241 identifier_list: IDENT
  242                | identifier_list ',' IDENT
  243                | ε

  244 type_name: specifier_qualifer_list abstract_declarator
  245          | specifier_qualifer_list
  246          | ε

  247 abstract_declarator: pointer
  248                    | pointer direct_abstract_declarator
  249                    | direct_abstract_declarator
  250                    | ε

  251 direct_abstract_declarator: '(' abstract_declarator ')'
  252                           | direct_abstract_declarator '[' type_qualifier_list assignment_expression ']'
  253                           | '[' ']'
  254                           | '[' type_qualifier_list ']'
  255                           | '[' assignment_expression ']'
  256                           | direct_abstract_declarator '[' ']'
  257                           | direct_abstract_declarator '[' type_qualifier_list ']'
  258                           | direct_abstract_declarator '[' assignment_expression ']'
  259                           | '[' type_qualifier_list assignment_expression ']'
  260                           | direct_abstract_declarator '[' STATIC type_qualifier_list assignment_expression ']'
  261                           | '[' STATIC assignment_expression ']'
  262                           | direct_abstract_declarator '[' STATIC assignment_expression ']'
  263                           | '[' STATIC type_qualifier_list assignment_expression ']'
  264                           | direct_abstract_declarator '[' type_qualifier_list STATIC assignment_expression ']'
  265                           | '[' type_qualifier_list STATIC assignment_expression ']'
  266                           | direct_abstract_declarator '[' '*' ']'
  267                           | '[' '*' ']'
  268                           | direct_abstract_declarator '(' parameter_type_list ')'
  269                           | direct_abstract_declarator '(' ')'
  270                           | '(' parameter_type_list ')'
  271                           | '(' ')'
  272                           | ε

  273 typedef_name: IDENT

  274 initalizer: assignment_expression
  275           | '{' initalizer_list '}'
  276           | '{' initalizer_list ',' '}'
  277           | ε

  278 initalizer_list: designation initalizer
  279                | initalizer
  280                | initalizer_list ',' designation initalizer
  281                | initalizer_list ',' initalizer
  282                | ε

  283 designation: designator_list '='

  284 designator_list: designator
  285                | designator_list designator
  286                | ε

  287 designator: '[' constant_expression ']'
  288           | '.' IDENT
  289           | ε

  290 static_assert_decleration: _STATIC_ASSERT '(' constant_expression ',' STRING ')' ';'

  291 statment: labeled_statment
  292         | compound_statment
  293         | expression_statment
  294         | selection_statment
  295         | iteration_statment
  296         | jump_statment
  297         | ε

  298 labeled_statment: IDENT ':' statment
  299                 | CASE constant_expression ':' statment
  300                 | DEFAULT ':' statment
  301                 | ε

  302 compound_statment: '{' block_item_list '}'
  303                  | '{' '}'
  304                  | ε

  305 block_item_list: block_item
  306                | block_item_list block_item
  307                | ε

  308 block_item: declaration
  309           | statment
  310           | ε

  311 expression_statment: expression ';'
  312                    | ';'
  313                    | ε

  314 selection_statment: IF '(' expression ')' statment
  315                   | IF '(' expression ')' ELSE statment
  316                   | SWITCH '(' expression ')' statment
  317                   | ε

  318 iteration_statment: WHILE '(' expression ')' statment
  319                   | DO statment WHILE '(' expression ')' ';'
  320                   | FOR '(' expression ';' expression ';' expression ')' statment
  321                   | FOR '(' ';' ';' ')' statment
  322                   | FOR '(' expression ';' ';' ')' statment
  323                   | FOR '(' ';' expression ';' ')' statment
  324                   | FOR '(' ';' ';' expression ')' statment
  325                   | FOR '(' expression ';' ';' expression ')' statment
  326                   | FOR '(' expression ';' expression ';' ')' statment
  327                   | FOR '(' ';' expression ';' expression ')' statment
  328                   | FOR '(' declaration expression ';' expression ')' statment
  329                   | FOR '(' declaration ';' ')' statment
  330                   | FOR '(' declaration expression ';' ')' statment
  331                   | FOR '(' declaration ';' expression ')' statment
  332                   | ε

  333 jump_statment: GOTO IDENT ';'
  334              | CONTINUE ';'
  335              | BREAK ';'
  336              | RETURN expression ';'
  337              | RETURN ';'
  338              | ε

  339 translation_unit: external_declaration
  340                 | translation_unit external_declaration
  341                 | ε

  342 external_declaration: function_definition
  343                     | declaration
  344                     | ε

  345 function_definition: declaration_specifiers declarator declaration_list compound_statment
  346                    | declaration_specifiers declarator compound_statment
  347                    | ε

  348 declaration_list: declaration
  349                 | declaration_list declaration
  350                 | ε


Grammar

    0 $accept: constant $end

    1 constant: NUMBER
    2         | enumeration_constant
    3         | CHARLIT
    4         | ε

    5 enumeration_constant: IDENT


Terminals, with rules where they appear

    $end (0) 0
    '!' (33)
    '%' (37)
    '&' (38)
    '(' (40)
    ')' (41)
    '*' (42)
    '+' (43)
    ',' (44)
    '-' (45)
    '.' (46)
    '/' (47)
    ':' (58)
    ';' (59)
    '<' (60)
    '=' (61)
    '>' (62)
    '?' (63)
    '[' (91)
    ']' (93)
    '^' (94)
    '{' (123)
    '|' (124)
    '}' (125)
    '~' (126)
    error (256)
    IDENT (258) 5
    CHARLIT (259) 3
    STRING (260)
    NUMBER (261) 1
    INDSEL (262)
    PLUSPLUS (263)
    MINUSMINUS (264)
    SHL (265)
    SHR (266)
    LTEQ (267)
    GTEQ (268)
    EQEQ (269)
    NOTEQ (270)
    LOGAND (271)
    LOGOR (272)
    ELLIPSIS (273)
    TIMESEQ (274)
    DIVEQ (275)
    MODEQ (276)
    PLUSEQ (277)
    MINUSEQ (278)
    SHLEQ (279)
    SHREQ (280)
    ANDEQ (281)
    OREQ (282)
    XOREQ (283)
    AUTO (284)
    BREAK (285)
    CASE (286)
    CHAR (287)
    CONST (288)
    CONTINUE (289)
    DEFAULT (290)
    DO (291)
    DOUBLE (292)
    ELSE (293)
    ENUM (294)
    EXTERN (295)
    FLOAT (296)
    FOR (297)
    GOTO (298)
    IF (299)
    INLINE (300)
    INT (301)
    LONG (302)
    REGISTER (303)
    RESTRICT (304)
    RETURN (305)
    SHORT (306)
    SIGNED (307)
    SIZEOF (308)
    STATIC (309)
    STRUCT (310)
    SWITCH (311)
    TYPEDEF (312)
    UNION (313)
    UNSIGNED (314)
    VOID (315)
    VOLATILE (316)
    WHILE (317)
    _ALIGNAS (318)
    _ALIGNOF (319)
    _ATOMIC (320)
    _BOOL (321)
    _COMPLEX (322)
    _GENERIC (323)
    _IMAGINARY (324)
    _NORETURN (325)
    _STATIC_ASSERT (326)
    _THREAD_LOCAL (327)
    LN (328)


Nonterminals, with rules where they appear

    $accept (98)
        on left: 0
    constant (99)
        on left: 1 2 3 4
        on right: 0
    enumeration_constant (100)
        on left: 5
        on right: 2


State 0

    0 $accept: • constant $end

    IDENT    shift, and go to state 1
    CHARLIT  shift, and go to state 2
    NUMBER   shift, and go to state 3

    $default  reduce using rule 4 (constant)

    constant              go to state 4
    enumeration_constant  go to state 5


State 1

    5 enumeration_constant: IDENT •

    $default  reduce using rule 5 (enumeration_constant)


State 2

    3 constant: CHARLIT •

    $default  reduce using rule 3 (constant)


State 3

    1 constant: NUMBER •

    $default  reduce using rule 1 (constant)


State 4

    0 $accept: constant • $end

    $end  shift, and go to state 6


State 5

    2 constant: enumeration_constant •

    $default  reduce using rule 2 (constant)


State 6

    0 $accept: constant $end •

    $default  accept
